# -*-makefile-*-
#
# pre-defined tasks that we might want to run
# 



# ## fiskmo benchmark for sv-fi

# FISKMO_SV = ${PWD}/fiskmo_testset.sv.gz
# FISKMO_FI = ${PWD}/fiskmo_testset.fi.gz


# ## benchmark with the fiskmo testset and the current model

# evalfiskmo:
# 	if [ "${filter sv,${SRCLANGS}}" == "sv" ]; then \
# 	  ${MAKE} SRC=sv TRG=fi TESTSET=fiskmo_testset eval; \
# 	fi
# 	if [ "${filter sv,${TRGLANGS}}" == "sv" ]; then \
# 	  ${MAKE} TRG=sv SRC=fi TESTSET=fiskmo_testset eval; \
# 	fi


# ## benchmark with en-fi news data

# evalnews:
# 	if [ "${filter en,${SRCLANGS}}" == "en" ]; then \
# 	  ${MAKE} SRC=en TRG=fi TESTSET=newstest2015.en-fi eval; \
# 	  ${MAKE} SRC=en TRG=fi TESTSET=newstest2016.en-fi eval; \
# 	  ${MAKE} SRC=en TRG=fi TESTSET=newstest2017.en-fi eval; \
# 	  ${MAKE} SRC=en TRG=fi TESTSET=newstest2018.en-fi eval; \
# 	fi
# 	if [ "${filter en,${TRGLANGS}}" == "en" ]; then \
# 	  ${MAKE} TRG=en SRC=fi TESTSET=newstest2015.en-fi eval; \
# 	  ${MAKE} TRG=en SRC=fi TESTSET=newstest2016.en-fi eval; \
# 	  ${MAKE} TRG=en SRC=fi TESTSET=newstest2017.en-fi eval; \
# 	  ${MAKE} TRG=en SRC=fi TESTSET=newstest2018.en-fi eval; \
# 	fi


# #	${MAKE} SRCLANGS=fi TRGLANGS=en SRC=fi TRG=en evalnews
# #	${MAKE} SRCLANGS=fi TRGLANGS=en SRC=fi TRG=en eval

# multi-evalfiskmo:
# 	${MAKE} SRCLANGS="da fo is no nb nn sv" TRGLANGS="et fi" SRC=sv TRG=fi evalfiskmo
# 	${MAKE} TRGLANGS="da fo is no nb nn sv" SRCLANGS="et fi" SRC=fi TRG=sv evalfiskmo


# all-evalfiskmo: 
# 	${MAKE} SRCLANGS=sv TRGLANGS=fi SRC=sv TRG=fi evalfiskmo
# 	${MAKE} TRGLANGS=sv SRCLANGS=fi SRC=fi TRG=sv evalfiskmo
# 	${MAKE} SRCLANGS="da fo is no nb nn sv" TRGLANGS=fi SRC=sv TRG=fi evalfiskmo
# 	${MAKE} SRCLANGS="da fo is no nb nn sv" TRGLANGS='et hu fi' SRC=sv TRG=fi evalfiskmo

#	${MAKE} SRCLANGS="da no nb nn sv" TRGLANGS=fi SRC=sv TRG=fi evalfiskmo
#	${MAKE} TRGLANGS="da no nb nn sv" SRCLANGS=fi SRC=fi TRG=sv evalfiskmo
#	${MAKE} SRCLANGS="de da en no nb nn nl sv" TRGLANGS=fi SRC=sv TRG=fi evalfiskmo
#	${MAKE} TRGLANGS="de da en no nb nn nl sv" SRCLANGS=fi SRC=fi TRG=sv evalfiskmo
#	${MAKE} SRCLANGS="da no nb nn sv" TRGLANGS="fi et" SRC=sv TRG=fi evalfiskmo
#	${MAKE} TRGLANGS="da no nb nn sv" SRCLANGS="fi et" SRC=fi TRG=sv evalfiskmo
#	${MAKE} SRCLANGS="da fo is no nb nn sv" TRGLANGS="fi et hu" SRC=sv TRG=fi evalfiskmo
#	${MAKE} TRGLANGS="da fo is no nb nn sv" SRCLANGS="fi et hu" SRC=fi TRG=sv evalfiskmo
#	${MAKE} SRCLANGS="da no nb nn sv" TRGLANGS="fi et" SRC=sv TRG=fi evalfiskmo
#	${MAKE} TRGLANGS="da no nb nn sv" SRCLANGS="fi et" SRC=fi TRG=sv evalfiskmo

#	${MAKE} SRCLANGS=sv TRGLANGS=fi SRC=sv TRG=fi TRAINSET=Finlex evalfiskmo
#	${MAKE} TRGLANGS=sv SRCLANGS=fi SRC=fi TRG=sv TRAINSET=Finlex evalfiskmo
#	${MAKE} SRCLANGS=sv TRGLANGS=fi SRC=sv TRG=fi TRAINSET=fiskmo evalfiskmo
#	${MAKE} TRGLANGS=sv SRCLANGS=fi SRC=fi TRG=sv TRAINSET=fiskmo evalfiskmo
#	${MAKE} SRCLANGS=sv TRGLANGS=fi SRC=sv TRG=fi TRAINSET=fiskmo TRAINSIZE=100000 evalfiskmo
#	${MAKE} SRCLANGS=sv TRGLANGS=fi SRC=sv TRG=fi TRAINSET=fiskmo TRAINSIZE=500000 evalfiskmo
#	${MAKE} SRCLANGS=sv TRGLANGS=fi SRC=sv TRG=fi TRAINSET=fiskmo TRAINSIZE=1000000 evalfiskmo




run-eval:
	${MAKE} SRCLANGS=sv TRGLANGS=fi SRC=sv TRG=fi evalfiskmo
	${MAKE} TRGLANGS=sv SRCLANGS=fi SRC=fi TRG=sv evalfiskmo
	${MAKE} SRCLANGS=sv TRGLANGS=fi SRC=sv TRG=fi eval
	${MAKE} TRGLANGS=sv SRCLANGS=fi SRC=fi TRG=sv eval
	${MAKE} SRCLANGS=de TRGLANGS=fi SRC=de TRG=fi eval
	${MAKE} SRCLANGS=fi TRGLANGS=fr SRC=fi TRG=fr eval
	${MAKE} SRCLANGS=fr TRGLANGS=de SRC=fr TRG=de eval
	${MAKE} SRCLANGS=de TRGLANGS=fr SRC=de TRG=fr eval
	${MAKE} SRCLANGS=fi TRGLANGS=nl SRC=fi TRG=nl eval
	${MAKE} SRCLANGS=fr TRGLANGS=fi SRC=fr TRG=fi eval
	${MAKE} SRCLANGS=nl TRGLANGS=de SRC=nl TRG=de eval
	${MAKE} SRCLANGS=de TRGLANGS=nl SRC=de TRG=nl eval
	${MAKE} SRCLANGS=fi TRGLANGS=fr SRC=fi TRG=de eval
	${MAKE} SRCLANGS=fr TRGLANGS=nl SRC=fr TRG=nl eval
	${MAKE} SRCLANGS=nl TRGLANGS=fr SRC=nl TRG=fr eval
	${MAKE} SRCLANGS=sv TRGLANGS=de SRC=sv TRG=de eval



## run things with individual data sets only
%-fiskmo:
	${MAKE} TRAINSET=fiskmo ${@:-fiskmo=}

%-opensubtitles:
	${MAKE} TRAINSET=OpenSubtitles ${@:-opensubtitles=}

%-finlex:
	${MAKE} TRAINSET=Finlex ${@:-finlex=}



## a batch of interesting models ....

## some models with Finnish as source or target
## make sure that we don't use WMT testsets for fi-en/en-fi


iso639 = aa ab ae af ak am an ar as av ay az ba be bg bh bi bm bn bo br bs ca ce ch cn co cr cs cu cv cy da de dv dz ee el en eo es et eu fa ff fi fj fo fr fy ga gd gl gn gr gu gv ha hb he hi ho hr ht hu hy hz ia id ie ig ik io is it iu ja jp jv ka kg ki kj kk kl km kn ko kr ks ku kv kw ky la lb lg li ln lo lt lu lv me mg mh mi mk ml mn mo mr ms mt my na nb nd ne ng nl nn no nr nv ny oc oj om or os pa pi pl po ps pt qu rm rn ro ru rw ry sa sc sd se sg sh si sk sl sm sn so sq sr ss st su sv sw ta tc te tg th ti tk tl tn to tr ts tt tw ty ua ug uk ur uz ve vi vo wa wo xh yi yo za zh zu

NO_MEMAD = ${filter-out fi sv de fr nl,${iso639}}

all2en:
	for s in ${NO_MEMAD}; do \
	  if [ "$$s" != "en" ]; then \
	    if [ ! -e ${WORKHOME}/$$s-en/train.submit ]; then \
	      ${MAKE} SRCLANGS=$$s TRGLANGS='en' traindata devdata; \
	      if [ `zcat ${WORKHOME}/$$s-en/train/*.src.${PRE_SRC}.gz | wc -l` -gt 1000000 ]; then \
		echo "$$s-en bigger than 1 million"; \
		${MAKE} SRCLANGS=$$s TRGLANGS='en' HPC_CORES=1 HPC_MEM=4g train.submit-multigpu; \
	      elif [ `zcat ${WORKHOME}/$$s-en/train/*.src.${PRE_SRC}.gz | wc -l` -gt 100000 ]; then \
		echo "$$s-en bigger than 100k"; \
		${MAKE} SRCLANGS=$$s TRGLANGS='en' \
			MARIAN_VALID_FREQ=2500 \
			MARIAN_EARLY_STOPPING=5 \
			HPC_CORES=1 HPC_MEM=4g train.submit; \
	      else \
		echo "$$s-en too small"; \
	      fi \
	    fi \
	  fi \
	done
	for s in ${NO_MEMAD}; do \
	  if [ "$$s" != "en" ]; then \
	    if [ ! -e ${WORKHOME}/en-$$s/train.submit ]; then \
	      ${MAKE} TRGLANGS=$$s SRCLANGS='en' traindata devdata; \
	      if [ `zcat ${WORKHOME}/en-$$s/train/*.src.${PRE_SRC}.gz | wc -l` -gt 1000000 ]; then \
		echo "en-$$s bigger than 1 million"; \
		${MAKE} TRGLANGS=$$s SRCLANGS='en' HPC_CORES=1 HPC_MEM=4g train.submit-multigpu; \
	      elif [ `zcat ${WORKHOME}/en-$$s/train/*.src.${PRE_SRC}.gz | wc -l` -gt 100000 ]; then \
		echo "en-$$s bigger than 100k"; \
		${MAKE} TRGLANGS=$$s SRCLANGS='en' \
			MARIAN_VALID_FREQ=2500 \
			MARIAN_EARLY_STOPPING=5 \
			HPC_CORES=1 HPC_MEM=4g train.submit; \
	      else \
		echo "en-$$s too small"; \
	      fi \
	    fi \
	  fi \
	done

memad:
	for s in fi en sv de fr nl; do \
	  for t in en fi sv de fr nl; do \
	    if [ "$$s" != "$$t" ]; then \
	      if ! grep -q 'stalled ${MARIAN_EARLY_STOPPING} times' ${WORKHOME}/$$s-$$t/*.valid${NR.log}; then\
	        ${MAKE} SRCLANGS=$$s TRGLANGS=$$t traindata devdata wordalign; \
	        ${MAKE} SRCLANGS=$$s TRGLANGS=$$t HPC_CORES=1 HPC_MEM=4g train.submit-multigpu; \
	      fi \
	    fi \
	  done \
	done


fiensv_bpe:
	${MAKE} SRCLANGS=fi TRGLANGS=sv traindata-bpe 
	${MAKE} SRCLANGS=fi TRGLANGS=sv devdata-bpe
	${MAKE} SRCLANGS=fi TRGLANGS=sv wordalign-bpe
	${MAKE} SRCLANGS=fi TRGLANGS=sv WALLTIME=72 HPC_MEM=4g HPC_CORES=1 train-bpe.submit-multigpu
	${MAKE} SRCLANGS=fi TRGLANGS=en traindata-bpe 
	${MAKE} SRCLANGS=fi TRGLANGS=en devdata-bpe
	${MAKE} SRCLANGS=fi TRGLANGS=en wordalign-bpe
	${MAKE} SRCLANGS=fi TRGLANGS=en WALLTIME=72 HPC_MEM=4g HPC_CORES=1 train-bpe.submit-multigpu


fiensv_spm:
	${MAKE} SRCLANGS=fi TRGLANGS=sv traindata-spm 
	${MAKE} SRCLANGS=fi TRGLANGS=sv devdata-spm
	${MAKE} SRCLANGS=fi TRGLANGS=sv wordalign-spm
	${MAKE} SRCLANGS=fi TRGLANGS=sv WALLTIME=72 HPC_MEM=4g HPC_CORES=1 train-spm.submit-multigpu
	${MAKE} SRCLANGS=fi TRGLANGS=en traindata-spm 
	${MAKE} SRCLANGS=fi TRGLANGS=en devdata-spm
	${MAKE} SRCLANGS=fi TRGLANGS=en wordalign-spm
	${MAKE} SRCLANGS=fi TRGLANGS=en WALLTIME=72 HPC_MEM=4g HPC_CORES=1 train-spm.submit-multigpu


memad_spm:
	for s in fi en sv de fr nl; do \
	  for t in en fi sv de fr nl; do \
	    if [ "$$s" != "$$t" ]; then \
	      if ! grep -q 'stalled ${MARIAN_EARLY_STOPPING} times' ${WORKHOME}/$$s-$$t/*.valid${NR.log}; then\
	          ${MAKE} SRCLANGS=$$s TRGLANGS=$$t traindata-spm; \
	          ${MAKE} SRCLANGS=$$s TRGLANGS=$$t devdata-spm; \
	          ${MAKE} SRCLANGS=$$s TRGLANGS=$$t wordalign-spm; \
	          ${MAKE} SRCLANGS=$$s TRGLANGS=$$t HPC_CORES=1 HPC_MEM=4g train-spm.submit-multigpu; \
	      fi \
	    fi \
	  done \
	done


memad_doc:
	for s in fi en sv; do \
	  for t in en fi sv; do \
	    if [ "$$s" != "$$t" ]; then \
	      if ! grep -q 'stalled ${MARIAN_EARLY_STOPPING} times' ${WORKHOME}/$$s-$$t/*.valid${NR.log}; then\
	          ${MAKE} SRCLANGS=$$s TRGLANGS=$$t traindata-doc; \
	          ${MAKE} SRCLANGS=$$s TRGLANGS=$$t devdata-doc; \
	          ${MAKE} SRCLANGS=$$s TRGLANGS=$$t wordalign-doc; \
	          ${MAKE} SRCLANGS=$$s TRGLANGS=$$t HPC_CORES=1 HPC_MEM=4g train-doc.submit-multigpu; \
	      fi \
	    fi \
	  done \
	done



enfisv:
	${MAKE} SRCLANGS="en fi sv" TRGLANGS="en fi sv" traindata devdata wordalign
	${MAKE} SRCLANGS="en fi sv" TRGLANGS="en fi sv" HPC_MEM=4g WALLTIME=72 HPC_CORES=1 train.submit-multigpu

germanic:
	${MAKE} SRCLANGS="en de nl fy af da fo is no nb nn sv" \
		TRGLANGS="en de nl fy af da fo is no nb nn sv" traindata devdata wordalign
	${MAKE} SRCLANGS="en de nl fy af da fo is no nb nn sv" \
		TRGLANGS="en de nl fy af da fo is no nb nn sv" \
		WALLTIME=72 HPC_CORES=1 HPC_MEM=4g train.submit-multigpu

en-fiet:
	${MAKE} SRCLANGS="en" TRGLANGS="et fi" traindata devdata
	${MAKE} SRCLANGS="en" TRGLANGS="et fi" HPC_MEM=4g HPC_CORES=1 train.submit-multigpu
	${MAKE} TRGLANGS="en" SRCLANGS="et fi" traindata devdata
	${MAKE} TRGLANGS="en" SRCLANGS="et fi" HPC_MEM=4g HPC_CORES=1 train.submit-multigpu



memad-multi:
	for s in "da fo is no nb nn sv" "en fr" "et hu fi" "de nl af fy" "ca es fr ga it la oc pt_br pt"; do \
	      ${MAKE} SRCLANGS="$$s" TRGLANGS="$$s" traindata devdata; \
	      ${MAKE} SRCLANGS="$$s" TRGLANGS="$$s" HPC_MEM=4g HPC_CORES=1 train.submit-multigpu; \
	done
	for s in "da fo is no nb nn sv" "en fr" "et hu fi" "de nl af fy" "ca es fr ga it la oc pt_br pt"; do \
	  for t in "da fo is no nb nn sv" "en fr" "et hu fi" "de nl af fy" "ca es fr ga it la oc pt_br pt"; do \
	    if [ "$$s" != "$$t" ]; then \
	      ${MAKE} SRCLANGS="$$s" TRGLANGS="$$t" traindata devdata; \
	      ${MAKE} SRCLANGS="$$s" TRGLANGS="$$t" HPC_MEM=4g HPC_CORES=1 train.submit-multigpu; \
	    fi \
	  done \
	done

memad-multi2:
	for s in "en fr" "et hu fi" "de nl af fy" "ca es fr ga it la oc pt_br pt"; do \
	  for t in "da fo is no nb nn sv" "en fr" "et hu fi" "de nl af fy" "ca es fr ga it la oc pt_br pt"; do \
	    if [ "$$s" != "$$t" ]; then \
	      ${MAKE} SRCLANGS="$$s" TRGLANGS="$$t" traindata devdata; \
	      ${MAKE} SRCLANGS="$$s" TRGLANGS="$$t" HPC_MEM=4g HPC_CORES=1 train.submit-multigpu; \
	    fi \
	  done \
	done

memad-multi3:
	for s in "da fo is no nb nn sv" "de nl af fy" "ca es fr ga it la oc pt_br pt"; do \
	      ${MAKE} SRCLANGS="$$s" TRGLANGS="en" traindata devdata; \
	      ${MAKE} SRCLANGS="$$s" TRGLANGS="en" HPC_MEM=4g HPC_CORES=1 train.submit-multigpu; \
	      ${MAKE} SRCLANGS="en" TRGLANGS="$$s" traindata devdata; \
	      ${MAKE} SRCLANGS="en" TRGLANGS="$$s" HPC_MEM=4g HPC_CORES=1 train.submit-multigpu; \
	done
	${MAKE} SRCLANGS="en" TRGLANGS="fr" traindata devdata
	${MAKE} SRCLANGS="en" TRGLANGS="fr" HPC_MEM=4g HPC_CORES=1 train.submit-multigpu
	${MAKE} SRCLANGS="fr" TRGLANGS="en" traindata devdata
	${MAKE} SRCLANGS="fr" TRGLANGS="en" HPC_MEM=4g HPC_CORES=1 train.submit-multigpu





memad-fi:
	for l in en sv de fr; do \
	  ${MAKE} SRCLANGS=$$l TRGLANGS=fi traindata devdata; \
	  ${MAKE} SRCLANGS=$$l TRGLANGS=fi HPC_MEM=4g HPC_CORES=1 train.submit-multigpu; \
	  ${MAKE} TRGLANGS=$$l SRCLANGS=fi traindata devdata; \
	  ${MAKE} TRGLANGS=$$l SRCLANGS=fi HPC_MEM=4g HPC_CORES=1 train.submit-multigpu; \
	done



nordic:
	${MAKE} SRCLANGS="da fo is no nb nn sv" TRGLANGS="fi et hu" traindata
	${MAKE} SRCLANGS="da fo is no nb nn sv" TRGLANGS="fi et hu" HPC_MEM=4g HPC_CORES=1 train.submit-multigpu
	${MAKE} TRGLANGS="da fo is no nb nn sv" SRCLANGS="fi et hu" traindata
	${MAKE} TRGLANGS="da fo is no nb nn sv" SRCLANGS="fi et hu" HPC_MEM=4g HPC_CORES=1 train.submit-multigpu

romance:
	${MAKE} SRCLANGS="es ca ga oc it la fr ro pt_br pt" TRGLANGS="fi et hu" traindata
	${MAKE} SRCLANGS="es ca ga oc it la fr ro pt_br pt" TRGLANGS="fi et hu" HPC_MEM=4g HPC_CORES=1 train.submit-multigpu
	${MAKE} TRGLANGS="es ca ga oc it la fr ro pt_br pt" SRCLANGS="fi et hu" traindata
	${MAKE} TRGLANGS="es ca ga oc it la fr ro pt_br pt" SRCLANGS="fi et hu" HPC_MEM=4g HPC_CORES=1 train.submit-multigpu

westgermanic:
	${MAKE} SRCLANGS="de nl af fy" TRGLANGS="fi et hu" traindata
	${MAKE} SRCLANGS="de nl af fy" TRGLANGS="fi et hu" HPC_MEM=4g HPC_CORES=1 train.submit-multigpu
	${MAKE} TRGLANGS="de nl af fy" SRCLANGS="fi et hu" traindata
	${MAKE} TRGLANGS="de nl af fy" SRCLANGS="fi et hu" HPC_MEM=4g HPC_CORES=1 train.submit-multigpu


germanic-romance:
	${MAKE} SRCLANGS="fr ca es gl it la oc pt_br pt ro" \
		TRGLANGS="en de nl fy af da fo is no nb nn sv" traindata
	${MAKE} HPC_MEM=4g HPC_CORES=1 SRCLANGS="fr ca es gl it la oc pt_br pt ro" \
		TRGLANGS="en de nl fy af da fo is no nb nn sv" train.submit-multigpu
	${MAKE} TRGLANGS="fr ca es gl it la oc pt_br pt ro" \
		SRCLANGS="en de nl fy af da fo is no nb nn sv" traindata devdata
	${MAKE} HPC_MEM=4g HPC_CORES=1 TRGLANGS="fr ca es gl it la oc pt_br pt ro" \
		SRCLANGS="en de nl fy af da fo is no nb nn sv" train.submit-multigpu


